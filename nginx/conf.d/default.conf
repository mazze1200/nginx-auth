# https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps


js_import github_auth from github_oauth.js;
resolver 10.89.1.1;

js_shared_dict_zone zone=github_state:1M timeout=600s evict;
js_shared_dict_zone zone=github_loggedin:1M timeout=60s evict;


server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    js_var $github_state_zone_name github_state;
    js_var $github_loggedin_zone_name github_loggedin;

    # access_log  /var/log/nginx/host.access.log  main;

    # Client ID of the created GitHub App (see ../README.md)
    set $oauth_client_id "Ov23liOmhPHThO5miT6G";

    # Client Secret of the created GitHub App (see ../README.md)
    set $oauth_client_secret "5310e5f4739f4b3cc5319dddeebb631a5ba50ab3";

    # Name of the GitHub organization whose members can access the app
    set $github_organization "mazzeorg";

    # Scopes to request from GitHub. Must at least give "read:org"
    # Example: "read:org,repo"
    set $github_scopes "read:org";

    # Path at which cookie will be available. Set to "/" to enable access from all
    # paths.
    set $github_cookie_path "/";
   
    
    location / {
        # Name of the team the user shall be member of to access this ressource
        set $github_team "my_team";

        auth_request @github_authenticate;
        auth_request_set $login $sent_http_login;
        auth_request_set $name $sent_http_name;

        proxy_set_header Login $login;
        proxy_set_header Name $name;        
        proxy_set_header Team $github_team;


         error_page 401 = @autherror;

        # auth_request_set $token $sent_http_token;
        # proxy_set_header Token $token;
        # add_header Set-Cookie "token=deleted";

        # root   /usr/share/nginx/html;
        # index  index.html index.htm;
        # proxy_cookie_path / "/; secure";

        # add_header X-server-header "my server header content!"; 
        # proxy_set_header X-server-header "my header";

        proxy_set_header Cookie "";

        proxy_pass http://whoami;
    }

    location /other {
        # Name of the team the user shall be member of to access this ressource
        set $github_team "some_other_team";

        auth_request @github_authenticate;
        auth_request_set $login $sent_http_login;
        auth_request_set $name $sent_http_name;

        proxy_set_header Login $login;
        proxy_set_header Name $name;
        proxy_set_header Team $github_team;

         error_page 401 = @autherror;

        proxy_set_header Cookie "";

        proxy_pass http://whoami;
    }

    location = @github_authenticate {
        # This location implements an auth_request server that uses the JavaScript
        # module to perform the token introspection request.
        internal;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        
        js_content github_auth.sync_authenticate;
    }

    location = /github_login_callback {
        # This location implements an auth_request server that uses the JavaScript
        # module to perform the token introspection request.

        js_content github_auth.sync_login;
    }

    location = /_github_access_token {
        # Retreive access token in exchange for a code
        internal;
        proxy_method      POST;
        proxy_set_header accept "application/json";
        proxy_set_header Content-Type "application/json";
        proxy_set_header Cookie "";

        proxy_pass "http://github:3000/access_token?code=$arg_code";
    }

     location = /_github_user_info {
        # Retrieve user info like login and the Name of the user
        # https://docs.github.com/en/rest/users/users?apiVersion=2022-11-28#get-the-authenticated-user
        internal;

        gunzip on; # Decompress if necessary

        proxy_set_header    Content-Type "application/json";
        proxy_set_header    Accept "application/json";
        proxy_set_header    Authorization "Bearer $cookie_token";        
        proxy_set_header    Cookie "";


        # proxy_pass            "https://api.github.com/user";
        proxy_pass            "http://192.168.20.32:3000/user";
    }

      
    location = /_github_team_membership{
        # Retreive the user membership for the user
        # https://docs.github.com/en/rest/teams/members?apiVersion=2022-11-28#get-team-membership-for-a-user
        #   -H "Accept: application/vnd.github+json" \
        #   -H "Authorization: Bearer <YOUR-TOKEN>" \
        #   -H "X-GitHub-Api-Version: 2022-11-28" \
        #   https://api.github.com/orgs/ORG/teams/TEAM_SLUG/memberships/USERNAME
        internal;

        gunzip on; # Decompress if necessary
        
        proxy_set_header    X-GitHub-Api-Version "2022-11-28";
        proxy_set_header    Accept "application/vnd.github+json";
        proxy_set_header    Authorization "Bearer $cookie_token";
        proxy_set_header    Cookie "";

        proxy_pass            "http://192.168.20.32:3000/orgs/$github_organization/teams/$github_team/memberships/$arg_login";
    }


    location @autherror {
        # If the user is not logged in, redirect them to GitHub's login URL
        # See https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#1-request-a-users-github-identity
        
        js_set $state github_auth.store_uri;
        proxy_set_header Cookie "";

        return 302 "http://192.168.20.32:3000/authorize?state=$state";
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}

