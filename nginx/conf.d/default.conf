# proxy_cache_path /var/cache/nginx/ouath2 levels=1 keys_zone=ouath2:1m max_size=10m;

js_import github_auth from github_oauth.js;
resolver 10.89.1.1;

server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    # access_log  /var/log/nginx/host.access.log  main;

    
    location / {
        auth_request /_github_authenticate;
        auth_request_set $user $sent_http_user;
        proxy_set_header User $user;
        
        error_page 401 = @autherror;


        # auth_request_set $token $sent_http_token;
        # proxy_set_header Token $token;
        # add_header Set-Cookie "token=deleted";

        # root   /usr/share/nginx/html;
        # index  index.html index.htm;
        # proxy_cookie_path / "/; secure";

        # add_header X-server-header "my server header content!"; 
        # proxy_set_header X-server-header "my header";
        proxy_set_header Cookie "deleted";
        # proxy_hide_header Set-Cookie;

        proxy_pass http://whoami;
    }

    location /secure/ {
        # set $cookie_path "/";
        # set $auth_request_uri $request_uri;
        auth_request /_github_authenticate;
        # auth_request_set $token $sent_http_token;
        # proxy_set_header Token $token;
        # # Set Cookie for 1 year
        # add_header Set-Cookie "token=<my_token>";
        # add_header Set-Cookie "token=$token; Max-Age=31536000; Path=$cookie_path";
        # auth_request_set $token_payload $sent_http_token_payload;
        # proxy_set_header Token-Payload $token_payload;
        error_page 401 = @autherror;

#    proxy_ignore_headers    Set-Cookie;
#     proxy_hide_header       Set-Cookie;

# proxy_cookie_path / "/; secure";

        proxy_pass http://whoami;
    }

    location /data/ {
        # auth_request /_github_authenticate;
        # error_page 401 = @autherror;
        # proxy_cookie_path /foo "/; SameSite=None; HTTPOnly; Secure";

        proxy_pass http://whoami;
    }

    location = /_github_authenticate {
        # This location implements an auth_request server that uses the JavaScript
        # module to perform the token introspection request.
        internal;
        #   proxy_pass_request_body off;
        #   proxy_set_header Content-Length "";
        #   proxy_set_header X-Original-URI $request_uri;
        js_content github_auth.authenticate;
    }

    location = /_github_login {
        # This location implements an auth_request server that uses the JavaScript
        # module to perform the token introspection request.
        # internal;
        set $auth_request_uri $request_uri;

        js_content github_auth.login;

        # return 302 "http://192.168.20.32";
    }

    location = /github_access_token {
        internal;
        proxy_method      POST;
        proxy_set_header accept "application/json";
        proxy_set_header Content-Type "application/json";
        proxy_pass "http://github:3000/access_token?code=$arg_code";
    }

     location = /github_user_info {
        internal;

    gunzip on; # Decompress if necessary

    # proxy_set_header      Content-Type "application/json";
    # proxy_set_header      Accept "application/json";
    proxy_set_header      Authorization "Bearer $cookie_token";
    # proxy_set_header      User-Agent "nginx";
    # proxy_method          POST;
    # proxy_cache           ouath2;         # Enable caching of token introspection responses
    # proxy_cache_key       $arg_token;     # Cache the response for each unique access token
    # proxy_cache_lock      on;             # Don't allow simultaneous requests for same token
    # proxy_cache_valid     200 1h;         # How long to use cached introspection responses
    # proxy_cache_use_stale error timeout;  # Use old responses if we cannot reach the server
    # proxy_ignore_headers  Cache-Control Expires Set-Cookie; # Cache even when receiving these
 
    # proxy_pass            "https://api.github.com/user";
    proxy_pass            "http://192.168.20.32:3000/user";
    }
    

    location @autherror {
        # If the user is not logged in, redirect them to GitHub's login URL
        # See https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#1-request-a-users-github-identity
        return 302 "http://192.168.20.32:3000/authorize";
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}

